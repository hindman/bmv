--------
toc: Table of contents
--------

    toc         | Table of contents
    todos       | TODOs
    road-map    | Road map
    dev-notes   | Dev notes
    misc-notes  | Misc notes
    other-tools | Other tools

--------
todos: TODOs
--------

Tests:
    - User-prefs
    - The --edit option.

Editing pass:
    - User-prefs
    - The --edit option.
    - Tests.

Github actions:
    - Clipboard test disabled for Linux.
    - Python 3.4, 3.5, 3.6 not working on ubuntu-latest [need to use lower Ubuntu version for those Pythons]

Case-change-only renamings.
    - Path(orig).rename(new): case-change renaming works.
    - But existence checks current say the renaming is not needed.

    NEXT:
        - Try to set up Github Actions.

        - If I can test this across MacOS, ubuntu, Windows-server, across
          various Pythons, maybe I could drop the entire file-system apparatus:
          rename for real on the file system.

        - Then just use pytest to capture standard streams, SystemExit, etc.

    Function to determine a path's existence status:

        PS = PATH_STATUSES = constants('PathStatuses', dict(
            missing = 0,
            exists = 1,
            exists_strict = 2,
        ))

        def path_existence(path):
            p = Path(p)
            if p.parent.exists():
                if p in p.parent.iterdir():
                    return PS.exists_strict
                elif p.exists():
                    return PS.exists
            return PS.missing

    How will the fake file system implement those checks?

        - The dict implementation is not well suited for this. Ideally, I would
          have something like this:

            fs = FileSystem(case = SENSITIVE|PRESERVING|INSENSITIVE)

            Internally, it could use a dict:

                key = path.lower()
                value = set of actual paths on the system [path.upper() for INSENSITIVE]

                SENSITIVE: key exists and path in set
                PRESERVING: key exists (for PS.exists) and path in set (for PS.exists_strict)
                INSENSITIVE: key exists

        - Hacky, temporary workaround:

            - The fake system is used only in testing, with small dicts.

            - Every check could just process all of the key-value pairs to
              return the correct answer.

            - But that processing would have to assume a file-system behavior,
              so I guess I would have to default to case-preserving.

        - File system interactions:

            - cli.py
                - Path.home().
                - Read user-prefs.
                - Write log.
                - Read input paths from file.
                - Editing input paths in editor.

            - plan.py
                - Check path existence.
                - Create directory during renaming.
                - Renaming.

    How the RenamePair existence checks should operate:

        check_orig_exists():

            - Key question: is renaming possible?
            - PS.exists is sufficient.

        check_new_not_exists():

            - Key question: is renaming necessary?
            - Requires PS.exists_strict.

        check_new_parent_exists():

            - Key question: does renaming also require create-parent?
            - PS.exists is sufficient.

    Tests for this set of behaviors should cover all possibilities:

        parent    | name      | Example: orig vs new | Note
        ---------------------------------------------------------------------
        eq        | eq        | foo/bar   foo/bar    | .
        "         | case      | foo/bar   foo/BAR    | .
        "         | different | foo/bar   foo/b      | .
        case      | eq        | foo/bar   FOO/bar    | .
        "         | case      | foo/bar   FOO/BAR    | .
        "         | different | foo/bar   FOO/b      | .
        different | eq        | foo/bar   f/bar      | .
        "         | case      | foo/bar   f/BAR      | .
        "         | different | foo/bar   f/b        | .

Add --enforce and make --skip=equal the default.

Issues for optopus:

    - Did user supply a value or did it come from the configured default?

        - After parsing occurs, how does the user tell if an opts attribute was
          (1) supplied in the command-line args vs (2) obtain from the default.

        - This an annoying problem with no good argparse solutions.

    - Merging user-preferences and opts.

        - User-prefs and opts tend to have the same validation needs.

        - And the merge them can be tricky.

            - Maybe this isn't too bad if we could solve the argparse
              deficiency where you don't know if the opt was supplied or was
              the default.

            - If we knew that, then the merge logic would be simpler, I think[?].

                for K, V in prefs.items():
                    if opts.K was not set by user:
                        opts.K = V

    - How does a user request a non-default location for user-prefs?

        - Environment variable?

    - Negatable options:

        - Whether/how to display in help text.
        - How to represent data.

--------
road-map: Road map
--------

CLI.opts_config is awkward: rework.
    - The oc dicts lack a simple name attribute.
    - The opts_config collection would work better as a dict
      where you could look items up by name.
    - The special key names are a hassle.

Other operations:
    - copy: given old-paths, copy them to new-paths.
    - link: given old-paths (sources), create new-paths (links, soft or hard).
    - chmod: given old-paths, apply "new-path" chmod-specs to old-paths.
    - times: given old-paths, apply "new-path" time-specs to old-paths.
    - touch: given old-paths, touch them.

Additional failure control: backup.

Logging operations: list, prune.

Convenience renaming operations: evaluate:

    - In the classic rename script, these were call "rules".
    - Multiple could be applied via command-line options and parameters.

    - The rule I used almost exclusively:

        --expr PERLCODE

    - But note that classic rename usage looked more like this, where the
      PERLCODE was the first positional argument and the other positionals were
      orignal paths:

        rename PERLCODE PATH...

    - Most performed common string changes. Here are the long options on
      the `rename` installed on my MacOS. The classic rename scripts
      from the past were different.

        --append SUFFIX
        --prepend PREFIX
        --lower-case
        --upper-case
        --pipe COMMAND       # Pipe orig path to COMMAND; output becomes new path
        --subst FROM TO      # Text substitution, once per orig path.
        --subst-all FROM TO  # Same, but potentially multiple times per orig path.
        --remove-extension
        --keep-extension     # Remove ext; apply all other rules; then append ext.
        --camelcase          # Capitalize every word in the orig path.
        --urlesc             # Decode URL-escaped orig path.
        --nows               # Replace whitespace sequences with a single underscore.
        --rews               # Replace each underscore with single space.
        --noctrl             # Replace control char sequences with single underscore.
        --nometa             # Replace each shell meta-character with underscore.
        --trim               # Remove whitespace and underscores from ends of orig path.

Undo renaming, based on log.

Options:
    --row-delimiter [default: tab]
    --path-delimiter [default: newline]
    --no-strip [default: paths are stripped]

Alternative dryrun output styles:
    - same as input structures
    - plus json

Complex failure/validation scenarios:
    - prior renaming would make subsequent renaming fail [eg, changing directory path before attempting a file rename]

--------
dev-notes: Dev notes
--------

Creating a new virtualenv:

    v='3.9.4'
    deactivate
    pyenv shell $v && pyenv versions
    mkvirtualenv mvs-$v
    pip install -U pip
    pip install -e .[dev,test] && pip list

Activate and run tests:

    - Basic:

        workon mvs-3.9.4
        pytest -s -v tests/

    - With invoke:

        inv test
        inv tox

    - With tox directly:

        pyenv shell 3.9.4  3.8.9  ...
        tox

Version bump:

    - Edit/commit all changes, including CHANGES and README.

    inv bump --kind major|minor|patch

Publish:

    inv dist [--publish] [--test]

Installing from test pypi:

    pip install --index-url https://test.pypi.org/simple/ mvs

Tag file creation:

    inv tags

--------
misc-notes: Misc notes
--------

The purpose of the --paragraphs structure:

    - It does not provide any user flexibility.

    - Rather, it applies an extra component of strictness to the input parsing.

    - The paragraphs structure is the same as flat, plus the additional
      requirement that at least one blank existings between the original and
      new paths.

Adding --enforce and making --skip=equal the default:

    - What the --enforce mechanism means:

        - If the user applies --enforce=X it removes any upstream configuations
          setting a control for X.

        - The upstream configuations are the application defaults and the user
          defaults (mvs.conf).

    - Demonstration that we can achieve all configurations:

        - Assume that Problem X has applicable controls skip, parent.

        - Under every combination of application default (either no control or
          having a default control) and user default (either no change or
          applying a setting), the command-line user can still achieve all of
          the possible behaviors (enforce, skip, parent).

        App default | User default | Command-line
        ===========================================
        No control  | .            | --skip X
        "           | .            | --parent X
        -------------------------------------------
        "           | skip = X     | --parent X
        "           | skip = X     | --enforce X
        -------------------------------------------
        "           | parent = X   | --skip X
        "           | parent = X   | --enforce X
        ===========================================
        skip = X    | .            | --parent X
        "           | .            | --enforce X
        -------------------------------------------
        "           | parent = X   | --skip X
        "           | parent = X   | --enforce X
        -------------------------------------------
        "           | enforce = X  | --skip X
        "           | enforce = X  | --parent X
        ===========================================

How --edit relates to SOURCES and STRUCTURES:

    - The --edit option is like a "source" and has structural implications, but
      it not literally a source or a structure.

    - Source:

        - The option is not a primary source. Instead, the user provides
          original paths from a primary source.

        - Like --rename, --edit augments those paths. But unlike --rename, the
          augmentation occur before path parsing. So the steps go like this:

            - Read input from source (orig paths)
            - Write paths to temp file.
            - Edit temp file.
            - Read input paths from temp file (orig paths and new paths).
            - Parse.

    - Structure:

        - Both --edit and --rename have structural implications.

        - But --rename functions as a STRUCTURE in command-line grammar becaue
          it means the user need not (and cannot meaningfully) specify a
          structure other than the default of --flat.

        - By contrast, a user can use --edit and any of the structures. The
          --edit option assumes that the input input paths are flat and solely
          original; but the final edited temp file can have any structure the
          user wants.

Policy regarding new parents:

    - If user requests parent-affecting rename, what is intended?

        foo/bar.txt => FOO/bar-new.txt

    - Does user want to create FOO or rename foo to FOO?

        - If create is intended, it would work only on the case-sensistive
          systems that allow foo and FOO to coexist.

        - If rename is intended, that would affect the unlisted siblings of the
          original path.

            - That seems like a significant operation to infer with certaintly
              from a file rename request.

            - By contrast, an explicitly requested directory rename is known to
              affect all of its contents. But contents and siblings are
              different.

    - Policy to avoid that complexity and ambiguity:

        - Parents can be created but not renamed.

    - How mvs would behave in the current example:

        OS case-sensitive | Action
        -----------------------------------------------
        Yes               | Create missing FOO
        No                | Do nothing since FOO exists

        - In other words, create parent only if the user requests it and if the
          file system says the parent is missing.

--------
other-tools: Other tools
--------

CLI tools:

  - rename

    - http://search.cpan.org/~pederst/rename-1.9/bin/rename.PL

    - Classic Perl renaming utility by Larry Wall, subsequently maintained
      (perhaps with minor enhancements) by others.

    - The core concept was to use a Perl expression to convert ORIG names to
      NEW names.

  - brn

    - http://search.cpan.org/~swestrup/App-FileTools-BulkRename-0.07/bin/brn

    - Enhancement of the Perl rename tool.

  - perlmv

    - http://search.cpan.org/dist/App-perlmv/bin/perlmv

    - Enhancement of the Perl rename tool.

    - Scriptlets directory where a user could store small bits of renaming
      logic. On the command-line, these common scenarios could be referenced by
      name.

  - pmv

    - http://search.cpan.org/~jv/File-PerlMove-0.06/script/pmv

    - Enhancement of the Perl rename tool.

  - renameutils

    - http://www.nongnu.org/renameutils/

    - Editor mode: open candidate renamings in text file; user edits and quits;
      then renaming occurs.

  - mmv

    - Unix mass move tool. Fairly basic.

    - Very little information available aside from some archived man pages.

  - rnm

    - https://github.com/neurobin/rnm

    - Many features, but nothing I haven't covered already.

    - A long and cryptic set of options, codes, and terminology.


GUI tools and OS-specific tools:

  - pyrenamer

    - https://github.com/SteveRyherd/pyRenamer

  - gprename

    - https://en.wikipedia.org/wiki/GPRename

  - krename

    - http://www.krename.net/home/

  - Metamorphose

    - https://github.com/metamorphose/metamorphose2

