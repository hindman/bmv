--------
toc: Table of contents
--------

    toc         | Table of contents
    todos       | TODOs
    road-map    | Road map
    usage       | Usage
    dev-notes   | Dev notes
    other-tools | Other tools

--------
todos: TODOs
--------

Documentation:

    - CLI help text
        - Quick reading pass.

    - README:
        - General documentation.
        - CLI usage.
        - Also see Usage section in this file, and eventually delete it.
        - API usage.

    - User-facing API:

        - Imports.
            __version__
            RenamingPlan
            MvsError

        - RenamingPlan parameters.
            # Path inputs and their structure.
            inputs
            structure = None
            # User code for renaming and filtering.
            rename_code = None
            filter_code = None
            indent = 4
            # Sequence numbering.
            seq_start = 1
            seq_step = 1
            # Problem controls.
            skip = None
            clobber = None
            create = None

        - RenamingPlan methods.
            prepare()
            rename_paths()

        - RenamingPlan attributes and properties.
            as_dict
            failed
            uncontrolled_problems
            tracking_index

Publish:
    - setup.py: classifiers
    - Make repo public.
    - Version bump.
    - Publish.

--------
road-map: Road map
--------

Case-change-only renamings.
    - Path(orig).rename(new): works
    - But existence checks do not respect case.
    - This will vary by OS.

Other operations:
    - copy: given old-paths, copy them to new-paths.
    - link: given old-paths (sources), create new-paths (links, soft or hard).
    - chmod: given old-paths, apply "new-path" chmod-specs to old-paths.
    - times: given old-paths, apply "new-path" time-specs to old-paths.
    - touch: given old-paths, touch them.

Additional failure control: backup.

Logging operations: list, prune.

Undo renaming, based on log.

Support preferences.
    - switch my pager back to `less`.

Options:
    --row-delimiter [default: tab]
    --path-delimiter [default: newline]
    --no-strip [default: paths are stripped]

Alternative dryrun output styles:
    - same as input structures
    - plus json

Complex failure/validation scenarios:
    - prior renaming would make subsequent renaming fail [eg, changing directory path before attempting a file rename]

--------
usage: Usage
--------

Usage:

    mvs SOURCE [STRUCTURE] [OTHER]

    PATHS     : positionals
    SOURCE    : PATHS | --stdin | --file PATH | --clipboard
    STRUCTURE : --flat | --paragraphs | --pairs | --rows | --rename CODE
    OTHER     : all other options

Notes:

    - Default structure is --flat.

    - The --rename option is considered structural because it implies that the
      input path data consists solely of original paths.

--------
dev-notes: Dev notes
--------

Creating a new virtualenv:

    v='3.9.4'
    deactivate
    pyenv shell $v && pyenv versions
    mkvirtualenv mvs-$v
    pip install -U pip
    pip install -e .[dev,test] && pip list

Activate and run tests:

    - Basic:

        workon mvs-3.9.4
        pytest -s -v tests/

    - With invoke:

        inv test
        inv tox

    - With tox directly:

        pyenv shell 3.9.4  3.8.9  ...
        tox

Version bump:

    - Edit/commit all changes, including CHANGES and README.

    inv bump --kind major|minor|patch

Publish:

    inv dist [--publish] [--test]

Installing from test pypi:

    pip install --index-url https://test.pypi.org/simple/ mvs

Tag file creation:

    inv tags

--------
other-tools: Other tools
--------

CLI tools:

  - rename

    - http://search.cpan.org/~pederst/rename-1.9/bin/rename.PL

    - Classic Perl renaming utility by Larry Wall, subsequently maintained
      (perhaps with minor enhancements) by others.

    - The core concept was to use a Perl expression to convert ORIG names to
      NEW names.

  - brn

    - http://search.cpan.org/~swestrup/App-FileTools-BulkRename-0.07/bin/brn

    - Enhancement of the Perl rename tool.

  - perlmv

    - http://search.cpan.org/dist/App-perlmv/bin/perlmv

    - Enhancement of the Perl rename tool.

    - Scriptlets directory where a user could store small bits of renaming
      logic. On the command-line, these common scenarios could be referenced by
      name.

  - pmv

    - http://search.cpan.org/~jv/File-PerlMove-0.06/script/pmv

    - Enhancement of the Perl rename tool.

  - renameutils

    - http://www.nongnu.org/renameutils/

    - Editor mode: open candidate renamings in text file; user edits and quits;
      then renaming occurs.

  - mmv

    - Unix mass move tool. Fairly basic.

    - Very little information available aside from some archived man pages.

  - rnm

    - https://github.com/neurobin/rnm

    - Many features, but nothing I haven't covered already.

    - A long and cryptic set of options, codes, and terminology.


GUI tools and OS-specific tools:

  - pyrenamer

    - https://github.com/SteveRyherd/pyRenamer

  - gprename

    - https://en.wikipedia.org/wiki/GPRename

  - krename

    - http://www.krename.net/home/

  - Metamorphose

    - https://github.com/metamorphose/metamorphose2

